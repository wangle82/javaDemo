

线程并发容器 : 非阻塞队列 : 特点操作队列的时候，队列里没有数据，会返回null，而不需要一直等
对HashTable ： 在多线程环境下是线程安全的，但是当多线程分别调用类的iterator()方法返回Iterator对象后，
在调用remove()时会出现ConcurrentModificationException异常
ConcurrentHashMap : 只持高并发操作的Map对象
ConcurrentSkipListMap : 支持排序,保证并发取值，也可以按照顺序取
对Vector： 在多线程环境下是线程安全的，但是当多线程分别调用类的iterator()方法返回Iterator对象后，
在调用remove()时会出现ConcurrentModificationException异常
CopyOnWriteArrayList : ArrayList线程安全类
CopyOnWriteArraySet : HashSet 线程安全类
ConcurrentLinkedQueue : 并发环境的队列操作，单向列表
ConcurrentLinkedDeque : 并发环境的队列操作，双向列表

线程并发容器 : 阻塞队列
ArrayBlockingQueue使用
    ArrayListBlockingQueue是有界的，是一个有界缓存的等待队列,基于数组的阻塞队列。
    ArrayBlockingQueue内部还保存着两个变量，分别标识着队列的头部和尾部在数组中的位置。
    ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行.

LinkedBlockingQueue使用:
    LinkedBlockingQueue是无界的，是一个无界缓存的等待队列,基于链表的阻塞队列，内部维持着一个数据缓冲队列（该队列由链表构成）。
    当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；
    只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。
    LinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，
    这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。

SynchronousQueue使用
    SynchronousQueue是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；
    可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，
    remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。
    声明一个SynchronousQueue有两种不同的方式: 公平模式和非公平模式的区别:
    如果采用公平模式：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；
    如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，
    而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。

PriorityBlockingQueue使用
    优先任务队列时带执行优先级的队列，它PriorityBlockingQueue实现，可以控制任务的执行顺序。
    需要对放入优先级的队列，设置权重





