一、CyclicBarrier 与 CountDownLanch
CyclicBarrier 增加CountDownLanch的功能,他可以循环地实现线程要一起做任务的目标，而不仅仅像CountDownLanch一样，只支持一次同步方式。

主要方法：
    await()是一个加法操作 ,线程到达屏障点时候加1，并且方法到达栅栏的阈值的时候，会重新设置，从而实现循环同步任务的作用
    getNumberWaiting : 获得有几个线程已经到达屏障点
    isBroken : 判断是否由于异常，导致屏障点被破坏

缺点: 不可以动态添加栅栏的数量,调用一次await()仅仅占用1个计数

CountDownLanch : 一个线程或者多个线程，等待另一个线程或多个线程完成某个事情之后才能继续执行
CyclicBarrier : 多个线程之间相互等待，任何一个线程完成之前，所有线程都必须等待,如果其中一个线程中断了，那么

二 使用
CyclicBarrier实现起跑阶段
